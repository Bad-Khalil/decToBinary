/*
 * This file was automatically generated by EvoSuite
 * Sat Jul 28 23:07:05 GMT 2018
 */

package dec2bin;

import org.junit.Test;
import static org.junit.Assert.*;
import dec2bin.Calculator;
import org.evosuite.runtime.EvoRunner;
import org.evosuite.runtime.EvoRunnerParameters;
import org.junit.runner.RunWith;

@RunWith(EvoRunner.class) @EvoRunnerParameters(mockJVMNonDeterminism = true, useVFS = true, useVNET = true, resetStaticState = true, separateClassLoader = true, useJEE = true) 
public class Calculator_ESTest extends Calculator_ESTest_scaffolding {

  @Test(timeout = 4000)
  public void test0()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Integer integer0 = new Integer(0);
      String string0 = calculator0.calculate(integer0);
      assertEquals("-------------------\nFormatted spelling:\n\n1 \n-------------------\nNormal spelling:\n\n-------------------", string0);
  }

  @Test(timeout = 4000)
  public void test1()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Integer integer0 = new Integer(1);
      String string0 = calculator0.calculate(integer0);
      assertEquals("-------------------\nFormatted spelling:\n1 \n1 \n-------------------\nNormal spelling:\n1\n-------------------", string0);
  }

  @Test(timeout = 4000)
  public void test2()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Integer integer0 = new Integer((-20));
      String string0 = calculator0.calculate(integer0);
      assertEquals("-------------------\nFormatted spelling:\n 1 0 1 0 0 \n16-8-4-2-1 \n-------------------\nNormal spelling:\n10100\n-------------------", string0);
  }

  @Test(timeout = 4000)
  public void test3()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      String string0 = calculator0.calculate((Integer) null);
      assertEquals("Sorry, this number is invalid.", string0);
  }

  @Test(timeout = 4000)
  public void test4()  throws Throwable  {
      Calculator calculator0 = new Calculator();
      Integer integer0 = new Integer((-2416));
      String string0 = calculator0.calculate(integer0);
      assertEquals("---------------------------------------\nFormatted spelling:\n   1    0   0   1   0  1  1  1 0 0 0 0 \n2048-1024-512-256-128-64-32-16-8-4-2-1 \n---------------------------------------\nNormal spelling:\n100101110000\n---------------------------------------", string0);
  }
}
